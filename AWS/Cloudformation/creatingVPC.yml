AWSTemplateFormatVersion: '2010-09-09'

Description:
  "Here is the template to describe 1st week and 2nd week"

Parameters:
  pDbName:
    Type: String
  pDbUser:
    Type: String
  pDbPass:
    Type: String
    Description: "It should be less than 8 characters"
    NoEcho: true
  BucketName:
    Type: String
    Default: mysite.example.com
  #HostedZoneName:
  #  Type: String
  #  Default: example.com

Resources:
  
  MyOwnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]  
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private subnet 1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name  
          Value: !Sub ${AWS::StackName} Private subnet 2

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyOwnVPC
  
  AttachIGToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyOwnVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyOwnVPC
      Tags:
        - Key: Name  
          Value: PublicRouteTable
  
  Route1:
    Type: AWS::EC2::Route
    DependsOn: AttachIGToVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  InstanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open 22 and 80 for ec2 Instance 
      VpcId: !Ref MyOwnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0     
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DatabaseSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open 3306 port for mysql
      VpcId: !Ref MyOwnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: MySubnetGroup
      DBSubnetGroupDescription: Subnet group for our database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Retain
    Properties:
      BackupRetentionPeriod: 7
      DBName: !Ref pDbName
      MasterUsername: !Ref pDbUser
      MasterUserPassword: !Ref pDbPass
      Engine: MySQL
      EngineVersion: 8.0.28
      DBInstanceClass: db.t2.micro
      StorageType: gp2
      PubliclyAccessible: false
      AllocatedStorage: "20"
      DBInstanceIdentifier: !Join ["-", [ "MyMySQLDbInstance", !Ref "AWS::Region" ]]
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref DatabaseSecGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: My-Launch-template-for-asg
      LaunchTemplateData:
        ImageId: ami-05fa00d4c63e32376
        InstanceType: t2.micro
        InstanceInitiatedShutdownBehavior: terminate
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          Groups:
            - !Ref InstanceSecGroup
#        UserData:
#          Fn::Base64: !Sub |     # No more Fn::Join needed
#            #!/bin/bash
#            yum update -y
#            yum install -y httpd.x86_64
#            systemctl start httpd.service
#            systemctl enable httpd.service
#            echo “Hello World from $(hostname -f)” > /var/www/html/index.html

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
#      LoadBalancerNames:
#        - !Ref LoadBalancer
  

#  ELBWebServerSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Enable HTTP access via port 80
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: '80'
#          ToPort: '80'
#          CidrIp: 0.0.0.0/0
#      VpcId: !Ref MyOwnVPC
#  
#  LoadBalancer:
#    Type: AWS::ElasticLoadBalancing::LoadBalancer
#    DependsOn:
#      - MyInternetGateway
#      - AttachIGToVPC
#    Properties:
#      Subnets:
#        - !Ref PublicSubnet1
#        - !Ref PublicSubnet2
#      CrossZone: 'true'
#      Listeners:
#        - LoadBalancerPort: '80'
#          InstancePort: '80'
#          Protocol: HTTP
#      HealthCheck:
#        Target: HTTP:80/
#        HealthyThreshold: '3'
#        UnhealthyThreshold: '5'
#        Interval: '30'
#        Timeout: '5'
#      SecurityGroups:
#        - !Ref ELBWebServerSecurityGroup  

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*

#  DNS:
#    Type: AWS::Route53::RecordSetGroup
#    Properties:
#      HostedZoneName: !Join
#        - ''
#        - - !Ref HostedZoneName
#          - '.'
#      Comment: Add CName to point to S3 bucket endpoint.
#      RecordSets:
#      -
#        Name: !Ref BucketName
#        Type: CNAME
#        TTL: 900
#        ResourceRecords:
#        - !Join ['', !Split ['http://', !GetAtt S3Bucket.WebsiteURL ]]
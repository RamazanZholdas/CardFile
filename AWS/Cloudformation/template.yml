AWSTemplateFormatVersion: '2010-09-09'

Description: 'Here is the template to describe 1st week and 2nd week'

Parameters:
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
  pDbName:
    Type: String
  pDbUser:
    Type: String
  pDbPass:
    Type: String
    Description: 'It should be less than 8 characters'
    NoEcho: true
  BucketName:
    Type: String
    Default: mysite.example.com
  CPUPolicyTargetValue:
    Type: String
    Description: The target utilization for the CPU metric
  OriginKeepaliveTimeout:
    Description: You can create a custom keep-alive timeout. All timeout units are in seconds. The default keep-alive timeout is 5 seconds, but you can configure custom timeout lengths. The minimum timeout length is 1 second; the maximum is 60 seconds.
    Type: String
    Default: '60'
  OriginProtocolPolicy:
    Description: CloudFront Origin Protocol Policy to apply to your origin.
    Type: String
    Default: 'http-only'
    AllowedValues:
      - http-only
      - match-viewer
      - https-only

  OriginReadTimeout:
    Description: You can create a custom origin read timeout. All timeout units are in seconds. The default origin read timeout is 30 seconds, but you can configure custom timeout lengths. The minimum timeout length is 4 seconds; the maximum is 60 seconds.
    Type: String
    Default: '30'

Resources:
  MyOwnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private subnet 2

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyOwnVPC

  AttachIGToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyOwnVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyOwnVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  Route1:
    Type: AWS::EC2::Route
    DependsOn: AttachIGToVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  InstanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open 22 and 80 for ec2 Instance
      VpcId: !Ref MyOwnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DatabaseSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open 3306 port for mysql
      VpcId: !Ref MyOwnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: MySubnetGroup
      DBSubnetGroupDescription: Subnet group for our database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Retain
    Properties:
      BackupRetentionPeriod: 7
      DBName: !Ref pDbName
      MasterUsername: !Ref pDbUser
      MasterUserPassword: !Ref pDbPass
      Engine: MySQL
      EngineVersion: 8.0.28
      DBInstanceClass: db.t2.micro
      StorageType: gp2
      PubliclyAccessible: false
      AllocatedStorage: '20'
      DBInstanceIdentifier: !Join ['-', ['MyMySQLDbInstance', !Ref 'AWS::Region']]
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref DatabaseSecGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: My-Launch-template-for-asg
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt MyInstanceProfile.Arn
        ImageId: ami-05fa00d4c63e32376
        InstanceType: t2.micro
        InstanceInitiatedShutdownBehavior: terminate
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref InstanceSecGroup
        UserData:
          Fn::Base64: !Sub | # No more Fn::Join needed
            #!bin/bash
            yum update
            yum install -y aws-cli
            yum install -y ruby
            yum install -y golang
            yum install -y git
            yum install -y wget
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile
            sudo systemctl enable codedeploy-agent
            sudo systemctl start codedeploy-agent
            mkdir temp
            cd temp/
            touch appgo.service 
            touch myapp.sh 
            chmod +x myapp.sh 
            chmod +777 appgo.service 
            echo -e "[Unit]\nDescription=My go app\n\n[Service]\nExecStart=/usr/local/bin/./myapp.sh\nUser=root\nGroup=root\nUMask=007\n\n[Install]\nWantedBy=multi-user.target\n" > appgo.service 
            echo -e "#!/bin/bash\ncd /home/ec2-user\nsudo go run main.go" > myapp.sh
            mv appgo.service /etc/systemd/system
            mv myapp.sh /usr/local/bin
            systemctl daemon-reload
            systemctl enable appgo.service
            systemctl start appgo.service

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - LoadBalancer
    Properties:
      TargetGroupARNs:
        - !Ref Test1TargetGroup
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: '2'
      MinSize: '1'
      DesiredCapacity: '1'
  #      LoadBalancerNames:
  #        - !Ref LoadBalancer

  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  ELBWebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

      VpcId: !Ref MyOwnVPC

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - MyInternetGateway
      - AttachIGToVPC
    Properties:
      IpAddressType: 'ipv4'
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ELBWebServerSecurityGroup

  HTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: 'HTTPS'
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'
          Type: 'redirect'

  HTTPSListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: 'HTTPS'
      SslPolicy: 'ELBSecurityPolicy-2016-08'
      Certificates:
        - CertificateArn: !Ref ACMCertificate
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref Test1TargetGroup
          Type: 'forward'

  Test1TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      Port: 80
      Protocol: 'HTTP'
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: 'instance'
      Matcher:
        HttpCode: '200'
      HealthyThresholdCount: 5
      VpcId: !Ref MyOwnVPC
      Name: 'target-group-1'
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: 'false'
        - Key: 'deregistration_delay.timeout_seconds'
          Value: '300'
        - Key: 'stickiness.type'
          Value: 'lb_cookie'
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: '86400'
        - Key: 'slow_start.duration_seconds'
          Value: '0'
        - Key: 'load_balancing.algorithm.type'
          Value: 'round_robin'

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*

  Route53HZ:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: 'My hosted zone'
      Name: 'alisherfreedomaintry.tk'

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      SubjectAlternativeNames:
        - '*.alisherfreedomaintry.tk'
      DomainName: alisherfreedomaintry.tk
      DomainValidationOptions:
        - DomainName: 'alisherfreedomaintry.tk'
          HostedZoneId: !Ref Route53HZ
      ValidationMethod: DNS

  CFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          #            ACMCertificateIdentifier: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${!GetAtt ACMCertificate.CertificateArn}'
          AcmCertificateArn: !Ref ACMCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultRootObject: 'index.html'
        Aliases:
          - alisherfreedomaintry.tk
        Origins:
          #        - DomainName: !Join [".", [!Ref BucketName, s3, us-east-1, amazonaws, com]]
          - DomainName: !GetAtt 'S3Bucket.DomainName'
            Id: !Ref S3Bucket
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: !Ref 'OriginProtocolPolicy'
              OriginKeepaliveTimeout: !Ref 'OriginKeepaliveTimeout'
              OriginReadTimeout: !Ref 'OriginReadTimeout'
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
                - SSLv3
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: !Ref S3Bucket
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HZ
      RecordSets:
        - Name: 'alisherfreedomaintry.tk'
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CFDistribution.DomainName
        - Name: 'elb.alisherfreedomaintry.tk.'
          Type: A
          AliasTarget:
            DNSName: !GetAtt LoadBalancer.DNSName
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            EvaluateTargetHealth: false

  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub ${AuthName}Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  MyEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref MyEC2Role

  MyCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName:
        Ref: AWS::StackName
      RepositoryDescription: CodeCommit Repository

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildGoProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}CodeBuildGoProject
      Source:
        Type: CODECOMMIT
        Location:
          Fn::Join:
            - ''
            - - 'https://git-codecommit.'
              - Ref: AWS::Region
              - '.amazonaws.com/v1/repos/'
              - Ref: AWS::StackName

  MyApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: 'MyApplicationForCD'
      ComputePlatform: 'Server'

  MyDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: 'MyApplicationForCD' # Required
      AutoScalingGroups:
        - !Ref MyASG
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: 'MyDeploymentGroup'
      ServiceRoleArn: !GetAtt MyCodeDeployRole.Arn # Required

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl

  CodePipelineStack:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: ArtifactStoreBucket
        Type: S3
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: MyApp
              Configuration:
                BranchName: 'main'
                RepositoryName: !Ref AWS::StackName
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: MyAppBuild
              InputArtifacts:
                - Name: MyApp
              Configuration:
                ProjectName: !Ref CodeBuildGoProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployApp
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              InputArtifacts:
                - Name: MyAppBuild
              Configuration:
                ApplicationName: !Ref MyApplication
                DeploymentGroupName: !Ref MyDeploymentGroup
              RunOrder: 1

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website: Custom image optimization and routing'
Parameters:
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Resources:

  ViewerRequestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
            - 'edgelambda.amazonaws.com'
          Action: 'sts:AssumeRole'

  ViewerRequestLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'ViewerRequestLogGroup.Arn'
      PolicyName: lambda
      Roles:
      - !Ref ViewerRequestRole

  ViewerRequestLambdaEdgePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: 'logs:CreateLogGroup'
          Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${ViewerRequestFunction}:log-stream:'
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${ViewerRequestFunction}:log-stream:*'
      PolicyName: 'lambda-edge'
      Roles:
      - !Ref ViewerRequestRole

  ViewerRequestFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'lambda.handler'
      MemorySize: 256
      Role: !GetAtt 'ViewerRequestRole.Arn'
      Runtime: 'nodejs16.x'
      Timeout: 5
      Code:
          ZipFile: !Join
          - |+

          - - exports.handler = async (event) => {
            - ' const response = {'
            - '   statusCode: 200,'
            - '   body: JSON.stringify("Hello from Lambda!"),'
            - ' }'
            - ' return response;'
            - '};'

  ViewerRequestLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ViewerRequestFunction}'
      RetentionInDays: !Ref LogsRetentionInDays

  ViewerRequestVersionV1:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref ViewerRequestFunction

  OriginRequestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
            - 'edgelambda.amazonaws.com'
          Action: 'sts:AssumeRole'

  OriginRequestLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'OriginRequestLogGroup.Arn'
      PolicyName: lambda
      Roles:
      - !Ref OriginRequestRole

  OriginRequestLambdaEdgePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: 'logs:CreateLogGroup'
          Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${OriginRequestFunction}:log-stream:'
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${OriginRequestFunction}:log-stream:*'
      PolicyName: 'lambda-edge'
      Roles:
      - !Ref OriginRequestRole

  OriginRequestFunction:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'lambda.handler'
      MemorySize: 256
      Role: !GetAtt 'OriginRequestRole.Arn'
      Runtime: 'nodejs16.x'
      Timeout: 30
      Code:
          ZipFile: !Join
          - |+

          - - exports.handler = async (event) => {
            - ' const response = {'
            - '   statusCode: 200,'
            - '   body: JSON.stringify("Hello from Lambda!"),'
            - ' }'
            - ' return response;'
            - '};'

  OriginRequestLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OriginRequestFunction}'
      RetentionInDays: !Ref LogsRetentionInDays

  OriginRequestVersionV1:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref OriginRequestFunction

Outputs:
  ViewerRequestLambdaEdgeFunctionVersionARN:
    Description: 'Version ARN of Lambda@Edge viewer request function.'
    Value: !Ref ViewerRequestVersionV1
  OriginRequestLambdaEdgeFunctionVersionARN:
    Description: 'Version ARN of Lambda@Edge origin request function.'
    Value: !Ref OriginRequestVersionV1
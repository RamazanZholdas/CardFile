AWSTemplateFormatVersion: '2010-09-09'

Description: 'Here is the template to describe 1st week and 2nd week'

Resources:
  MyOwnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyOwnVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public subnet 2

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyOwnVPC

  AttachIGToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyOwnVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyOwnVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  Route1:
    Type: AWS::EC2::Route
    DependsOn: AttachIGToVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  MyEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref MyEC2Role

  MyCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  InstanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyOwnVPC
      GroupDescription: Open 22 and 80 for ec2 Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: My-Launch-template-for-asg
      LaunchTemplateData:
        ImageId: ami-05fa00d4c63e32376
        InstanceType: t2.micro
        InstanceInitiatedShutdownBehavior: terminate
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref InstanceSecGroup
        UserData:
          Fn::Base64: !Sub | # No more Fn::Join needed
            #!bin/bash
            yum update
            yum install -y aws-cli
            yum install -y ruby
            yum install -y golang
            yum install -y git
            yum install -y wget
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile
            sudo systemctl enable codedeploy-agent
            sudo systemctl start codedeploy-agent
            mkdir temp
            cd temp/
            touch appgo.service 
            touch myapp.sh 
            chmod +x myapp.sh 
            chmod +777 appgo.service 
            echo -e "[Unit]\nDescription=My go app\n\n[Service]\nExecStart=/usr/local/bin/./myapp.sh\nUser=root\nGroup=root\nUMask=007\n\n[Install]\nWantedBy=multi-user.target\n" > appgo.service 
            echo -e "#!/bin/bash\ncd /home/ec2-user\nsudo go run main.go" > myapp.sh
            mv appgo.service /etc/systemd/system
            mv myapp.sh /usr/local/bin
            systemctl daemon-reload
            systemctl enable appgo.service
            systemctl start appgo.service

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: '2'
      MinSize: '1'
      DesiredCapacity: '1'

  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName:
        Ref: AWS::StackName
      RepositoryDescription: CodeCommit Repository

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildGoProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}CodeBuildGoProject
      Source:
        Type: CODECOMMIT
        Location:
          Fn::Join:
            - ''
            - - 'https://git-codecommit.'
              - Ref: AWS::Region
              - '.amazonaws.com/v1/repos/'
              - Ref: AWS::StackName

  MyApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: 'MyApplicationForCD'
      ComputePlatform: 'Server'

  #  MyDeploymentGroup:
  #    Type: 'AWS::CodeDeploy::DeploymentGroup'
  #    DependsOn: MyApplication
  #    Properties:
  #      ApplicationName:
  #        Ref: 'MyApplication'
  #      DeploymentConfigName: CodeDeployDefault.AllAtOnce
  #      Ec2TagSet:
  #        - Key:
  #          Ref:
  #        - Value: Ec2Name
  #      ServiceRoleArn: !Ref MyCodeDeployRole

  MyDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: 'MyApplicationForCD' # Required
      AutoScalingGroups:
        - !Ref MyASG
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: 'MyDeploymentGroup'
      ServiceRoleArn: !GetAtt MyCodeDeployRole.Arn # Required

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl

  CodePipelineStack:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: ArtifactStoreBucket
        Type: S3
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: MyApp
              Configuration:
                BranchName: 'main'
                RepositoryName: !Ref AWS::StackName
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: MyAppBuild
              InputArtifacts:
                - Name: MyApp
              Configuration:
                ProjectName: !Ref CodeBuildGoProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployApp
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              InputArtifacts:
                - Name: MyAppBuild
              Configuration:
                ApplicationName: !Ref MyApplication
                DeploymentGroupName: !Ref MyDeploymentGroup
              RunOrder: 1
